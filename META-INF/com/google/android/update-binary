#!/sbin/sh
#
# A simple Samsung services disabler by Ian Macdonald.
#
# Use this to prime your device after installing TWRP.

DEBUG=true

ZIPFILE=$3
ZIPNAME=${ZIPFILE##*/}
OUTFD=$2

scr_wdth=50

# Detect real $OUTFD
#
if readlink /proc/$$/fd/$OUTFD 2>/dev/null | grep /tmp >/dev/null; then
  OUTFD=0
  for FD in $( ls /proc/$$/fd ); do
    if readlink /proc/$$/fd/$FD 2>/dev/null | grep pipe >/dev/null; then
      if ps | grep " 3 $FD " | grep -v grep >/dev/null; then
	OUTFD=$FD
	break
      fi
    fi
  done
fi

ui_print() {
  echo -ne "ui_print $1\n" >> /proc/self/fd/$OUTFD
  echo -ne "ui_print\n" >> /proc/self/fd/$OUTFD
}

debug_print() {
  [ "$DEBUG" = true ] && ui_print "$*"
}

print_full_bar() {
  ui_print "$(printf '%*s\n' $scr_wdth | tr ' ' '=')"
}

print_justified() {
  local str="$1"
  local str_len=${#str}
  local padding_len=$(( ($scr_wdth - $str_len - 2) / 2))
  local ljust="$(printf '%*s' $padding_len)"
  local rjust="$(printf '%*s' $(($padding_len + $str_len % 2)))"

  ui_print "=$ljust$str$rjust="
}

md5() {
  md5sum -b "$1"
}

file_changed() {
  local file="$1"
  local old_md5="$2"
  local new_md5=$( md5 "$file" )

  if [ $new_md5 != $old_md5 ]; then
    debug_print " -     ...modified."
  else
    debug_print " -     ...unchanged."
  fi
}

# patch_prop <prop file> <prop name> <new prop value>
patch_prop() {
  local md5
  md5=$( md5 $1 )
  ui_print " -   Patching $2 to $3."
  if ! grep -q "^$2=" $1; then
    echo -ne "\n$2=$3\n" >> $1;
  else
    local line=$(grep -n -m1 "^$2=" $1 | cut -d: -f1);
    sed -i "${line}s;.*;${2}=${3};" $1;
  fi;
  file_changed $1 $md5
}

rm_from_manifest() {
  local service=$1
  local md5
  local i

  # Package path is different on Android 10. Check and adapt.
  #
  [ $major -gt 9 ] && local path_extra='\.hardware'

  for i in $2; do
    if [ -f $i ]; then
      ui_print " -   Found $i."
      md5=$( md5 $i )
      sed -i -e '/<hal format="hidl">/{N;/<name>vendor\.samsung'"$path_extra"'\.security\.'"$service"'<\/name>/{:loop;N;/<\/hal>/!bloop;d}}' $i
      file_changed $i $md5
    fi
  done
}

resize_vendor() {
  local dm_block=$(df -k | cat | grep "/vendor" | cut -d' ' -f1)

  ui_print " - Unmounting /vendor..."
  umount /vendor
  ui_print " - Checking vendor block partition before resizing..."
  e2fsck -f $dm_block
  ui_print " - Resizing the filesystem on $dm_block..."
  resize2fs $dm_block
  ui_print " - Make the partition R/W by unsharing its blocks..."
  e2fsck -E unshare_blocks $dm_block
  ui_print " - Remounting /vendor..."
  mount /vendor
  mount -o remount,rw /vendor
}

vendor_free_size_check() {
  ui_print " - Checking vendor free size..."
  if dd if=/dev/zero of=/vendor/test bs=1 count=1 2>/dev/null; then
    ui_print " -     ...succeeded."
    rm -f /vendor/test
  else
    ui_print " -     ...No free space left on vendor, attempting to resize vendor..."
    ui_print " "
    rm -f /vendor/test
    resize_vendor
  fi
}

disable_fbe() {
  local md5
  local i
  fstab_files=`grep -lr 'fileencryption' vendor/etc`

  # Exynos devices = fstab.exynos*.
  # MediaTek devices = fstab.mt*.
  # Snapdragon devices = fstab.qcom, fstab.emmc, fstab.default
  #
  for i in $fstab_files; do
    if [ -f $i ]; then
      ui_print " - Disabling file-based encryption (FBE) for /data..."
      ui_print " -   Found $i."
      md5=$( md5 $i )
      # This comments out the offending line and adds an edited one.
      sed -i -e 's/^\([^#].*\)fileencryption=[^,]*\(.*\)$/# &\n\1encryptable\2/g' $i
      file_changed $i $md5
    fi
  done
}

disable_fde() {
  local md5
  local i
  fstab_files=`grep -lr 'forceencrypt' vendor/etc`

  #
  # Exynos devices = fstab.exynos*.
  # MediaTek devices = fstab.mt*.
  # Snapdragon devices = fstab.qcom, fstab.emmc, fstab.default
  #
  for i in $fstab_files; do
    if [ -f $i ]; then
      ui_print " - Disabling full-disk encryption (FDE) for /data..."
      ui_print " -   Found $i."
      md5=$( md5 $i )
      # This comments out the offending line and adds an edited one.
      sed -i -e 's/^\([^#].*\)forceencrypt=[^,]*\(.*\)$/# &\n\1encryptable\2/g' $i
      file_changed $i $md5
    fi
  done
}

disable_vaultkeeper() {
  local md5
  local i

  ui_print " - Disabling vaultkeeper..."

  if [ $major -gt 9 ]; then
    # This is Android 10/11/12/13: Vaultkeeper has its own init files.
    #
    for i in $ANDROID_ROOT/system/etc/init/vk*.rc /vendor/etc/init/vk*.rc /vendor/etc/init/vaultkeeper*; do
      if [ -f $i ]; then
	ui_print " -   Found $i."
	md5=$( md5 $i )
	sed -i -e 's/^[^#].*$/# &/' $i
	file_changed $i $md5
      fi
    done
  else
    # This is Android 9: Vaultkeeper is started from init.rc.
    #
    sed -i -e 's/^[^#].*vaultkeeper.*$/# &/' \
	-re '/\/system\/bin\/vaultkeeperd/,/^#?$/s/^[^#]*$/#&/' $ANDROID_ROOT/init.rc
  fi

  # Qualcomm devices such as the T860 and T865 need this, otherwise the log
  # will be spammed with messages about failed connections to the Vaultkeeper
  # service.
  #
  rm_from_manifest vaultkeeper "/vendor/etc/vintf/manifest.xml $ANDROID_ROOT/system/etc/vintf/compatibility_matrix.device.xml /vendor/etc/vintf/manifest/vaultkeeper_manifest.xml"

  for i in $ANDROID_ROOT/system /vendor; do
    if [ -f $i/bin/vaultkeeperd ]; then
      ui_print " -   Found $i/bin/vaultkeeperd. Disabling..."
      chmod 0 $i/bin/vaultkeeperd
    fi
    if [ -f $i/bin/vendor.samsung.hardware.security.vaultkeeper@2.0-service ]; then
      chmod 0 $i/bin/vendor.samsung.hardware.security.vaultkeeper@2.0-service
    fi
  done
}

disable_cass() {
  local md5
  local i

  # The T860 needs this. Otherwise, the log will fill with messages like this:
  #
  # 10-20 03:23:20.501 27757 27757 E CASS: Failed to connect(4)
  # 10-20 03:23:20.501 27757 27757 E CASS: Failed to connect ril daemon(2). Retry cnt(6)
  # The F907B on Android 10 also needs it:
  #
  # 04-05 22:21:23.519  3599  3599 E CASS_DEBUG: VaultKeeper is not ready. try again.
  # 04-05 22:21:23.519  3599  3599 I CASS_DEBUG: Disconnect ril daemon
  # 04-05 22:21:23.519  3599  3599 I CASS_DEBUG: Failed to connect ril daemon(1). Retry cnt(2)
  #
  # As of OneUI 2.5, other devices need it, too; even Exynos.
  #
  ui_print " - Disabling cass..."

  for i in $ANDROID_ROOT/init.rc /vendor/init/cass.rc /vendor/etc/init/cass.rc; do
    if [ -f $i ]; then
      ui_print " -   Found $i. Disabling..."
      md5=$( md5 $i )
      sed -i -e 's/^[^#].*cass.*$/# &/' -re '/\/(system|vendor)\/bin\/cass/,/^#?$/s/^[^#]*$/#&/' $i
      file_changed $i $md5
    fi
  done
  patch_prop /vendor/build.prop ro.security.cass.feature 0
}

disable_proca() {
  local md5
  local i

  ui_print " - Disabling process authentication..."

  # G97[035]F = pa_daemon.rc on Android 9; pa_daemon_teegris.rc on Android 10.
  # G977B, N97[05]F, A105F, A505F = pa_daemon_teegris.rc
  # T510 + T515 = pa_daemon_kinibi.rc
  # T860 + T865 = pa_daemon_qsee.rc
  #
  for i in /vendor/etc/init/pa_daemon*.rc; do
    if [ -f $i ]; then
      ui_print " -   Found $i. Disabling..."
      md5=$( md5 $i )
      sed -i -e 's/^[^#]/# &/' $i
      file_changed $i $md5
    fi
  done

  rm_from_manifest proca "/vendor/etc/vintf/manifest.xml"
}

disable_wsm() {
  ui_print " - Disabling wsm..."
  rm_from_manifest wsm "/vendor/etc/vintf/manifest.xml /vendor/etc/vintf/manifest/wsm_manifest.xml"
}

disable_recovery_restoration() {
  local r=recovery-from-boot.p
  local found
  local i
  local md5

  ui_print " - Disabling restoration of stock recovery..."

  for i in $ANDROID_ROOT $ANDROID_ROOT/system /vendor; do
    if [ -f $i/$r~ ]; then
	ui_print " -   ...already disabled."
	found=true
	break
    fi

    if [ -f $i/$r ]; then
      ui_print " -   Found $i/$r. Disabling..."
      mv $i/$r $i/$r~

      if [ -f $i/$r~ ]; then
	ui_print " -     ...succeeded."
      else
	ui_print " -     ...failed."
      fi

      found=true
      break
    fi

  done

  for i in /vendor/etc/init/vendor_flash_recovery.rc; do
    if [ -f $i ]; then
      ui_print " -   Found $i."
      md5=$( md5 $i )
      sed -i -e 's/^[^#].*$/# &/' $i
      file_changed $i $md5
    fi
  done

  [ -z "$found" ] && ui_print " -   Found no stock recovery. Pfft."
}

fix_smart_view() {
  ui_print " - Fixing Smart View..."
  patch_prop $ANDROID_ROOT/system/build.prop wlan.wfd.hdcp disable
  patch_prop $ANDROID_ROOT/system/build.prop wifi.interface wlan0
}

disable_frp() {
  ui_print " - Disabling Factory Reset Protection (FRP)..."
  patch_prop /vendor/build.prop ro.frp.pst
}

disable_avb() {
  local md5
  if [ -f /vendor/etc/fstab.default ]; then
    ui_print " - Disabling Android Verified Boot (AVB)..."
    ui_print " -   Found /vendor/etc/fstab.default."
    md5=$( md5 /vendor/etc/fstab.default )
    sed -i -e 's/\,avb\_keys\=\/avb\/q\-gsi\.avbpubkey\:\/avb\/r\-gsi\.avbpubkey\:\/avb\/s\-gsi\.avbpubkey//g' -e 's/\,avb\=vbmeta//g' \
           -e 's/\,avb//g' /vendor/etc/fstab.default
    file_changed /vendor/etc/fstab.default $md5
  fi
}

disable_tlc() {
  local md5
  local i

  ui_print " - Removing TLC HDM/ICCC/KG..."
  # Fully remove those
  for i in "snap" "ddar" "hdm" "iccc"; do
    rm_from_manifest $i "/vendor/etc/vintf/manifest/vendor.samsung.hardware.tlc.$i*.xml"
  done
  for i in "blockchain" "ucm" "payment"; do
    rm_from_manifest $i "/vendor/etc/vintf/manifest.xml"
  done

  for i in /vendor/etc/init/vendor.samsung.hardware.tlc.*.rc; do
    if [ -f $i ]; then
      ui_print " -   Found $i."
      md5=$( md5 $i )
      sed -i -e 's/^[^#].*$/# &/' $i
      file_changed $i $md5
    fi
  done
  patch_prop /system_root/system/build.prop ro.config.iccc_version iccc_disabled
}

patch_libbluetooth() {
  [ $major -ne 10 || $major -ge 13 ] && return

  local f=$ANDROID_ROOT/system/lib64/libbluetooth.so
  local tf=/tmp/f

  ui_print " - Bluetooth fix requested via renamed zip."
  ui_print " - Attempting to patch $f..."
  ui_print "     This may take a while."

  if echo $device | grep -E '[GN]9[67][03567][UW0]|F90(0[FN]|7[BN])|T86[05]' >/dev/null; then
    # Snapdragon based devices, such as Tab S6, Fold (5G), USA and Chinese S9/10/N9/10.
    substitute='s/88000054691180522925c81a69000037e0030032/04000014691180522925c81a69000037e0031f2a/'
  else
    substitute='s/c8000034f4031f2af3031f2ae8030032/1f2003d5f4031f2af3031f2ae8031f2a/'
  fi

  xxd -p $f | tr -d '\n ' | sed -e $substitute | xxd -rp > $tf

  if ! cmp $tf $f >/dev/null && [ $(stat -c '%s' $tf) -eq $(stat -c '%s' $f) ]; then
    ui_print " -   Patching succeeded."
    touch -r $f $tf
    chmod 644 $tf
    mv $tf $f
  else
    ui_print " -   Patching failed. No change made."
    rm -f $tf
  fi
}

ui_print " "
print_full_bar
print_justified "Multi-disabler for Samsung devices"
print_justified "running Android 9 or later."
print_justified "by Ian Macdonald, afaneh92"
print_justified "corsicanu & Simon1511"
print_full_bar
ui_print " "

ui_print " - Mounting $ANDROID_ROOT..."
mount $ANDROID_ROOT 2>/dev/null
mount -o remount,rw $ANDROID_ROOT 2>/dev/null

if ! mount | grep $ANDROID_ROOT >/dev/null; then
  ANDROID_ROOT=/system_root
  ui_print " -   Attempt failed. Mounting at $ANDROID_ROOT..."
  mount -o rw $ANDROID_ROOT
  if ! mount | grep $ANDROID_ROOT >/dev/null; then
    ui_print " -   Even that attempt failed. Aborting..."
    exit 2
  fi
fi

ui_print " - Mounting /vendor..."
mount /vendor
mount -o remount,rw /vendor

if ! mount | grep /vendor >/dev/null; then
  ui_print " -   Mount failed. Aborting..."
  exit 3
fi

major=$(grep "ro.build.version.release=" $ANDROID_ROOT/system/build.prop | sed 's/ro\.build\.version\.release\=//g')
bl=$(getprop ro.boot.bootloader)
dp=$(getprop ro.boot.dynamic_partitions)

# Firmware version starts at either 8th or 9th character, depending on length
# of bootloader string (12 or 13).
#
fw=${bl:$((${#bl} - 4)):4}

# Device is first 5 characters of bootloader string.
#
device=${bl:0:$((${#bl} - 8))}
mft=$(getprop ro.product.manufacturer | tr '[A-Z]' '[a-z]')

if [ "$mft" != samsung ]; then
  ui_print " - Device appears not to be made by Samsung."
  fatal=true
elif [ -z "$device" ]; then
  ui_print " - Could not determine device model."
  fatal=true
elif [ $major -lt 9 ]; then
  ui_print " - This software is incompatible with Android $major."
  fatal=true
fi
# Check if running OneUI
if ! grep -q "knox" $ANDROID_ROOT/system/build.prop; then
  ui_print " - Installed ROM doesn't appear to be OneUI."
  fatal=true
fi
if [ -n "$fatal" ]; then
  ui_print " - Installation aborted."
  ui_print " "
  exit 1
fi

ui_print " - Detected a $device device with a $fw bootloader."
ui_print " - The environment appears to be Android $major."
ui_print " "

vendor_free_size_check
disable_fbe
disable_fde
disable_recovery_restoration
disable_vaultkeeper
disable_proca
fix_smart_view
disable_frp
disable_avb
disable_tlc
[ $ZIPNAME != ${ZIPNAME/_btfix//} ] && [ $major -gt 9 ] && patch_libbluetooth

if [ $major -gt 9 ]; then
  disable_wsm
  disable_cass
fi

ui_print " - Unmounting /vendor..."
umount /vendor
ui_print " - Unmounting $ANDROID_ROOT..."
umount $ANDROID_ROOT

ui_print " "
ui_print " - Finished."
ui_print " "
